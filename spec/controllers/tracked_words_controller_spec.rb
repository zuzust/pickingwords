require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TrackedWordsController do

  # This should return the minimal set of attributes required to create a valid
  # TrackedWord. As you add validations to TrackedWord, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { word_attributes: { name: "word" } }
  end
  
  def invalid_attributes
    { word_attributes: { name: "" } }
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TrackedWordsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before(:each) do
    @tracked = Fabricate(:tracked_word, valid_attributes)
  end

  describe "GET index" do
    it "assigns all tracked_words as @tracked_words" do
      get :index, {}, valid_session
      assigns(:tracked_words).should eq([@tracked])
    end
  end

  describe "GET show" do
    it "assigns the requested tracked_word as @tracked_word" do
      get :show, {:id => @tracked.to_param}, valid_session
      assigns(:tracked_word).should eq(@tracked)
    end
  end

  describe "GET new" do
    it "assigns a new tracked_word as @tracked_word" do
      get :new, {}, valid_session
      assigns(:tracked_word).should be_a_new(TrackedWord)
    end
  end

  describe "GET edit" do
    it "assigns the requested tracked_word as @tracked_word" do
      get :edit, {:id => @tracked.to_param}, valid_session
      assigns(:tracked_word).should eq(@tracked)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new TrackedWord" do
        expect {
          post :create, {:tracked_word => valid_attributes}, valid_session
        }.to change(TrackedWord, :count).by(1)
      end

      it "assigns a newly created tracked_word as @tracked_word" do
        post :create, {:tracked_word => valid_attributes}, valid_session
        assigns(:tracked_word).should be_a(TrackedWord)
        assigns(:tracked_word).should be_persisted
      end

      it "redirects to the created tracked_word" do
        post :create, {:tracked_word => valid_attributes}, valid_session
        response.should redirect_to(TrackedWord.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved tracked_word as @tracked_word" do
        # Trigger the behavior that occurs when invalid params are submitted
        TrackedWord.any_instance.stub(:save).and_return(false)
        post :create, {:tracked_word => {}}, valid_session
        assigns(:tracked_word).should be_a_new(TrackedWord)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        # TrackedWord.any_instance.stub(:save).and_return(false)
        # post :create, {:tracked_word => {}}, valid_session
        post :create, {:tracked_word => invalid_attributes}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested tracked_word" do
        # Assuming there are no other tracked_words in the database, this
        # specifies that the TrackedWord created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        TrackedWord.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => @tracked.to_param, :tracked_word => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested tracked_word as @tracked_word" do
        put :update, {:id => @tracked.to_param, :tracked_word => valid_attributes}, valid_session
        assigns(:tracked_word).should eq(@tracked)
      end

      it "redirects to the tracked_word" do
        put :update, {:id => @tracked.to_param, :tracked_word => valid_attributes}, valid_session
        response.should redirect_to(@tracked)
      end
    end

    describe "with invalid params" do
      it "assigns the tracked_word as @tracked_word" do
        # Trigger the behavior that occurs when invalid params are submitted
        TrackedWord.any_instance.stub(:save).and_return(false)
        put :update, {:id => @tracked.to_param, :tracked_word => {}}, valid_session
        assigns(:tracked_word).should eq(@tracked)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        # TrackedWord.any_instance.stub(:save).and_return(false)
        # put :update, {:id => @tracked.to_param, :tracked_word => {}}, valid_session
        put :update, {:id => @tracked.to_param, :tracked_word => invalid_attributes}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    describe "with no picks associated" do
      it "destroys the requested tracked_word" do
        expect {
          delete :destroy, {:id => @tracked.to_param}, valid_session
        }.to change(TrackedWord, :count).by(-1)
      end

      it "redirects to the tracked_words list" do
        delete :destroy, {:id => @tracked.to_param}, valid_session
        response.should redirect_to(tracked_words_url)
      end
    end

    describe "with associated picks" do
      it "cannot destroy the requested tracked_word" do
        @tracked.picks.create!(from_lang: "en", to_lang: "ca")
        expect {
          delete :destroy, {:id => @tracked.to_param}, valid_session
        }.to change(TrackedWord, :count).by(0)
      end
    end
  end

end
